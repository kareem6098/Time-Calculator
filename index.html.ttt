<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Time Calculation</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for the Inter font */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Hide number input arrows */
        /* Chrome, Safari, Edge, Opera */
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        /* Firefox */
        input[type=number] {
            -moz-appearance: textfield;
        }
    </style>
    <!-- PWA Manifest -->
    <link rel="manifest" href="manifest.json">
    <!-- Apple Touch Icon (for iOS home screen) -->
    <link rel="apple-touch-icon" href="icons/icon-192x192.png">
    <!-- iOS PWA Meta Tags -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Time Calc">
    <meta name="theme-color" content="#bbf7d0"> <!-- Matches a light green/teal -->

</head>
<body class="bg-gradient-to-br from-blue-100 to-purple-200 min-h-screen flex items-center justify-center p-4">

    <div class="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md border border-gray-200">
        <h1 class="text-3xl font-extrabold text-center text-gray-800 mb-6">Time Calculation</h1>

        <div class="space-y-6">
            <!-- Current Time Display -->
            <div class="bg-green-50 p-4 rounded-xl border border-green-100 shadow-sm text-center">
                <label class="block text-lg font-semibold text-green-700 mb-2">Current Time:</label>
                <p id="currentTimeDisplay" class="text-3xl font-bold text-green-800"></p>
            </div>

            <!-- Hours and Minutes to Subtract from 45:00 Inputs -->
            <div class="bg-blue-50 p-4 rounded-xl border border-blue-100 shadow-sm">
                <label class="block text-lg font-semibold text-blue-700 mb-3">Subtract from 45 hours</label>
                <div class="flex items-center space-x-3">
                    <input type="number" id="hoursToSubtract" placeholder="Hours" min="0" value="0"
                           class="w-1/2 p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-center text-lg font-medium text-gray-700 bg-white shadow-sm">
                    <span class="text-2xl text-blue-500">hours</span>
                    <input type="number" id="minutesToSubtract" placeholder="Minutes" min="0" max="59" value="0"
                           class="w-1/2 p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent text-center text-lg font-medium text-gray-700 bg-white shadow-sm">
                    <span class="text-2xl text-blue-500">minutes</span>
                </div>
            </div>

            <!-- Calculate Button -->
            <button id="calculateBtn"
                    class="w-full bg-gradient-to-r from-green-500 to-teal-600 text-white py-3 rounded-xl text-xl font-bold hover:from-green-600 hover:to-teal-700 transition-all duration-300 shadow-lg transform hover:scale-105 active:scale-95">
                Calculate Resulting Time
            </button>

            <!-- Result Display -->
            <div id="resultBox" class="bg-gray-100 p-5 rounded-xl border border-gray-200 shadow-inner text-center hidden">
                <h2 class="text-2xl font-bold text-gray-800 mb-2">New Time:</h2>
                <p id="result" class="text-3xl font-extrabold text-green-700"></p>
            </div>

            <!-- Error Message -->
            <div id="errorBox" class="bg-red-100 p-3 rounded-xl border border-red-200 text-red-700 text-center font-medium hidden">
                Please enter valid numbers for hours and minutes.
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Get references to input fields and display elements
            const hoursToSubtractInput = document.getElementById('hoursToSubtract');
            const minutesToSubtractInput = document.getElementById('minutesToSubtract');
            const calculateBtn = document.getElementById('calculateBtn');
            const resultElement = document.getElementById('result');
            const resultBox = document.getElementById('resultBox');
            const errorBox = document.getElementById('errorBox');
            const currentTimeDisplay = document.getElementById('currentTimeDisplay');

            /**
             * Updates the display with the current date and time.
             */
            const updateCurrentTimeDisplay = () => {
                const now = new Date();
                const options = { weekday: 'short', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' };
                currentTimeDisplay.textContent = now.toLocaleDateString('en-US', options);
            };

            // Update current time every second
            setInterval(updateCurrentTimeDisplay, 1000);
            updateCurrentTimeDisplay(); // Call once immediately to show current time on load

            /**
             * Validates an input field to ensure it contains a non-negative number within its min/max range (if max is defined).
             * @param {HTMLInputElement} inputElement - The input element to validate.
             * @returns {boolean} True if the input is valid, false otherwise.
             */
            const validateInput = (inputElement) => {
                const value = parseInt(inputElement.value, 10);
                const min = parseInt(inputElement.min, 10);
                const max = inputElement.max ? parseInt(inputElement.max, 10) : Infinity;

                // Check if value is a number, not NaN, and within min/max bounds
                if (isNaN(value) || value < min || value > max) {
                    inputElement.classList.add('border-red-500', 'ring-red-300'); // Highlight invalid input
                    return false;
                } else {
                    inputElement.classList.remove('border-red-500', 'ring-red-300'); // Remove highlight if valid
                    return true;
                }
            };

            /**
             * Handles the calculation of the new time by subtracting duration from 45 hours and adding the difference to current time.
             */
            const calculateNewTime = () => {
                // Hide previous results and errors
                resultBox.classList.add('hidden');
                errorBox.classList.add('hidden');

                // Validate inputs
                const isValidHours = validateInput(hoursToSubtractInput);
                const isValidMinutes = validateInput(minutesToSubtractInput);

                if (!isValidHours || !isValidMinutes) {
                    errorBox.classList.remove('hidden'); // Show error message if any input is invalid
                    return;
                }

                // Get values to subtract
                const hoursToSubtract = parseInt(hoursToSubtractInput.value, 10);
                const minutesToSubtract = parseInt(minutesToSubtractInput.value, 10);

                // Fixed reference time: 45 hours and 0 minutes
                const fixedTotalMinutes = (45 * 60) + 0;

                // User's input in minutes
                const userInputMinutes = (hoursToSubtract * 60) + minutesToSubtract;

                // Calculate the difference in minutes
                const differenceInMinutes = fixedTotalMinutes - userInputMinutes;

                // Get current time
                const now = new Date();

                // Add the calculated difference to the current time
                now.setMinutes(now.getMinutes() + differenceInMinutes);

                // Format the new date and time
                const options = {
                    weekday: 'long', // Full weekday name (e.g., Monday)
                    year: 'numeric',
                    month: 'long',   // Full month name (e.g., January)
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: true // Use 12-hour format with AM/PM
                };
                resultElement.textContent = now.toLocaleString('en-US', options);
                resultBox.classList.remove('hidden'); // Show the result box
            };

            // Add event listener to the calculate button
            calculateBtn.addEventListener('click', calculateNewTime);

            // Add input event listeners to validate inputs as the user types
            [hoursToSubtractInput, minutesToSubtractInput].forEach(input => {
                input.addEventListener('input', () => validateInput(input));
            });

            // Register Service Worker for PWA functionality
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('service-worker.js')
                        .then(registration => {
                            console.log('Service Worker registered with scope:', registration.scope);
                        })
                        .catch(error => {
                            console.error('Service Worker registration failed:', error);
                        });
                });
            }
        });
    </script>
</body>
</html>
